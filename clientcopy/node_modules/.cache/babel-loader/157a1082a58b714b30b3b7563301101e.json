{"ast":null,"code":"import _slicedToArray from \"/Users/annieliang/Documents/streams/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/annieliang/Documents/streams/client/src/components/streams/StreamFind.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchStreams } from '../../actions';\n\nclass StreamFind extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchTerm: '',\n      searchResults: null\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchStreams();\n    const term = this.props.match.params.term;\n    this.setState({\n      searchTerm: term\n    }, () => {\n      let results = [];\n\n      for (const _ref of Object.entries(this.props.streams)) {\n        var _ref2 = _slicedToArray(_ref, 2);\n\n        const key = _ref2[0];\n        const value = _ref2[1];\n        const title = value.title;\n\n        if (title.indexOf(this.state.searchTerm) !== -1) {\n          results.push(value);\n        } else if (value.username === searchTerm) {\n          results.push(value);\n        }\n\n        console.log(value.title);\n        console.log(value.title + ':' + value.title.indexOf(searchTerm));\n      }\n\n      this.setState({\n        searchResults: results\n      }, () => {\n        console.log(this.state);\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \"find\");\n  }\n\n}\n\nexport default connect(null, {\n  fetchStreams\n})(StreamFind);","map":{"version":3,"sources":["/Users/annieliang/Documents/streams/client/src/components/streams/StreamFind.js"],"names":["React","connect","fetchStreams","StreamFind","Component","constructor","props","state","searchTerm","searchResults","componentDidMount","term","match","params","setState","results","Object","entries","streams","key","value","title","indexOf","push","username","console","log","render"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,YAAT,QAA6B,eAA7B;;AAEA,MAAMC,UAAN,SAAyBH,KAAK,CAACI,SAA/B,CAAyC;AACrCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,UAAU,EAAE,EADH;AAETC,MAAAA,aAAa,EAAE;AAFN,KAAb;AAIH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKJ,KAAL,CAAWJ,YAAX;AADgB,UAERS,IAFQ,GAEC,KAAKL,KAAL,CAAWM,KAAX,CAAiBC,MAFlB,CAERF,IAFQ;AAGhB,SAAKG,QAAL,CAAc;AAAEN,MAAAA,UAAU,EAAEG;AAAd,KAAd,EAAmC,MAAM;AACrC,UAAII,OAAO,GAAG,EAAd;;AAEA,yBAA0BC,MAAM,CAACC,OAAP,CAAe,KAAKX,KAAL,CAAWY,OAA1B,CAA1B,EAA8D;AAAA;;AAAA,cAAnDC,GAAmD;AAAA,cAA9CC,KAA8C;AAC1D,cAAMC,KAAK,GAAGD,KAAK,CAACC,KAApB;;AACA,YAAGA,KAAK,CAACC,OAAN,CAAc,KAAKf,KAAL,CAAWC,UAAzB,MAAyC,CAAC,CAA7C,EAAgD;AAC5CO,UAAAA,OAAO,CAACQ,IAAR,CAAaH,KAAb;AACH,SAFD,MAEO,IAAGA,KAAK,CAACI,QAAN,KAAmBhB,UAAtB,EAAkC;AACrCO,UAAAA,OAAO,CAACQ,IAAR,CAAaH,KAAb;AACH;;AACDK,QAAAA,OAAO,CAACC,GAAR,CAAYN,KAAK,CAACC,KAAlB;AACAI,QAAAA,OAAO,CAACC,GAAR,CAAYN,KAAK,CAACC,KAAN,GAAc,GAAd,GAAoBD,KAAK,CAACC,KAAN,CAAYC,OAAZ,CAAoBd,UAApB,CAAhC;AACH;;AACD,WAAKM,QAAL,CAAc;AAAEL,QAAAA,aAAa,EAAEM;AAAjB,OAAd,EAA0C,MAAM;AAC5CU,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKnB,KAAjB;AACH,OAFD;AAGH,KAhBD;AAkBH;;AAGDoB,EAAAA,MAAM,GAAG;AACL,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACH;;AApCoC;;AAuCzC,eAAe1B,OAAO,CAAC,IAAD,EAAO;AAAEC,EAAAA;AAAF,CAAP,CAAP,CAAgCC,UAAhC,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchStreams } from '../../actions'\n\nclass StreamFind extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            searchTerm: '',\n            searchResults: null\n        }\n    }\n\n    componentDidMount() {\n        this.props.fetchStreams();\n        const { term } = this.props.match.params;\n        this.setState({ searchTerm: term}, () => {\n            let results = [];\n    \n            for(const [key, value] of Object.entries(this.props.streams)) {\n                const title = value.title;\n                if(title.indexOf(this.state.searchTerm) !== -1) {\n                    results.push(value);\n                } else if(value.username === searchTerm) {\n                    results.push(value);\n                }\n                console.log(value.title);\n                console.log(value.title + ':' + value.title.indexOf(searchTerm));\n            }\n            this.setState({ searchResults: results }, () => {\n                console.log(this.state);\n            })\n        })\n       \n    }\n    \n\n    render() {\n        return <div>find</div>\n    }\n}\n\nexport default connect(null, { fetchStreams })(StreamFind);"]},"metadata":{},"sourceType":"module"}