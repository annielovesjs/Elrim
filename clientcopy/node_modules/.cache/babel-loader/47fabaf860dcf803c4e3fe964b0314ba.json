{"ast":null,"code":"import _slicedToArray from \"/Users/annieliang/Documents/streams/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/annieliang/Documents/streams/client/src/components/streams/StreamFind.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { fetchStreams } from '../../actions';\n\nclass StreamFind extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchTerm: '',\n      searchResults: null\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchStreams();\n    const term = this.props.match.params.term;\n    this.setState({\n      searchTerm: term\n    });\n  }\n\n  renderSearchResults(resultsArr) {\n    return resultsArr.map(stream => {\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, React.createElement(Link, {\n        to: \"/streams/\".concat(stream.id),\n        className: \"item\",\n        key: stream.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"streamPicFrame\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        style: {\n          width: \"100%\",\n          height: \"100%\"\n        },\n        className: \"ui tiny image middle aligned streamPic\",\n        src: \"data:image/jpeg;base64, \".concat(stream.image.url),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"infoStream\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        className: \"ui tiny avatar image middle aligned\",\n        src: stream.streamerPic,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"streamData\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, stream.title), React.createElement(\"div\", {\n        className: \"description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, stream.username)))));\n    });\n  }\n\n  render() {\n    if (this.props.streams == {}) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, \"find\");\n    }\n\n    let results = [];\n\n    for (const _ref of Object.entries(this.props.streams)) {\n      var _ref2 = _slicedToArray(_ref, 2);\n\n      const key = _ref2[0];\n      const value = _ref2[1];\n      const title = value.title;\n\n      if (title.indexOf(this.state.searchTerm) !== -1) {\n        results.push(value);\n      } else if (value.username === this.state.searchTerm) {\n        results.push(value);\n      }\n    }\n\n    if (results.length === 0) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, \"No results found for: \".concat(this.state.searchTerm));\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, this.renderSearchResults(results));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    streams: state.streams\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStreams\n})(StreamFind);","map":{"version":3,"sources":["/Users/annieliang/Documents/streams/client/src/components/streams/StreamFind.js"],"names":["React","connect","Link","fetchStreams","StreamFind","Component","constructor","props","state","searchTerm","searchResults","componentDidMount","term","match","params","setState","renderSearchResults","resultsArr","map","stream","id","width","height","image","url","streamerPic","title","username","render","streams","results","Object","entries","key","value","indexOf","push","length","mapStateToProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { fetchStreams } from '../../actions'\n\nclass StreamFind extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            searchTerm: '',\n            searchResults: null\n        }\n    }\n\n    componentDidMount() {\n        this.props.fetchStreams();\n        const { term } = this.props.match.params;\n        this.setState({ searchTerm: term })\n    }\n\n    renderSearchResults(resultsArr) {\n        return resultsArr.map((stream) => {\n            return (\n                <React.Fragment>\n                    <Link to={`/streams/${stream.id}`} className=\"item\" key={stream.id}>\n                        <div className=\"streamPicFrame\">\n                            <img style={{width: \"100%\", height: \"100%\"}} className=\"ui tiny image middle aligned streamPic\" src={`data:image/jpeg;base64, ${stream.image.url}`}></img>\n                        </div>\n                        <div className=\"infoStream\">\n                            <img className=\"ui tiny avatar image middle aligned\" src={stream.streamerPic} />\n\n                            <div className=\"streamData\">\n                                <div className=\"title\">{stream.title}</div>\n                                <div className=\"description\">\n                                    {stream.username}\n                                </div>\n                            </div>\n                        </div>\n                    </Link>\n                </React.Fragment>\n            )\n        })\n    }\n    \n\n    render() {\n        if(this.props.streams == {}) {\n            return <div>find</div>\n        }\n        let results = [];\n        for(const [key, value] of Object.entries(this.props.streams)) {\n            const title = value.title;\n            if(title.indexOf(this.state.searchTerm) !== -1) {\n                results.push(value);\n            } else if(value.username === this.state.searchTerm) {\n                results.push(value);\n            }\n        }\n        if(results.length === 0) {\n            return <div>{`No results found for: ${this.state.searchTerm}`}</div>\n        }\n        return <div>{this.renderSearchResults(results)}</div>\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        streams: state.streams\n    }\n}\n\nexport default connect(mapStateToProps, { fetchStreams })(StreamFind);"]},"metadata":{},"sourceType":"module"}