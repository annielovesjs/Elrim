{"ast":null,"code":"var _jsxFileName = \"/Users/annieliang/Documents/streams/client/src/components/streams/StreamCreate.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nclass StreamCreate extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      return React.createElement(\"div\", {\n        className: \"field\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, label), React.createElement(\"input\", Object.assign({}, input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      })), this.renderError(meta));\n    };\n  }\n\n  renderError({\n    error,\n    touched\n  }) {\n    if (error && touched) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 8\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 9\n        },\n        __self: this\n      }, error));\n    }\n  } //inherit all the properties of input (ex. value, and onChange events) -> destructure input property from forProps\n\n\n  onSubmit(formProps) {\n    console.log(formProps);\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      className: \"ui form\",\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"title\",\n      component: this.renderInput,\n      label: \"Title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }), React.createElement(Field, {\n      name: \"description\",\n      component: this.renderInput,\n      label: \"Description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"ui button primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, \"Submit\"));\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {}; //hooked up ti render of the input title name\n\n  if (!formValues.title) {\n    errors.title = \"You need to enter a valid title\";\n  }\n\n  if (!formValues.description) {\n    errors.description = \"You need to enter a valid description\";\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: 'streamCreate',\n  validate\n})(StreamCreate);","map":{"version":3,"sources":["/Users/annieliang/Documents/streams/client/src/components/streams/StreamCreate.js"],"names":["React","Field","reduxForm","StreamCreate","Component","renderInput","input","label","meta","renderError","error","touched","onSubmit","formProps","console","log","render","props","handleSubmit","validate","formValues","errors","title","description","form"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,YAAjC;;AAEA,MAAMC,YAAN,SAA2BH,KAAK,CAACI,SAAjC,CAA2C;AAAA;AAAA;;AAAA,SAYvCC,WAZuC,GAYzB,CAAC;AAACC,MAAAA,KAAD;AAAQC,MAAAA,KAAR;AAAeC,MAAAA;AAAf,KAAD,KAA0B;AACpC,aACI;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQD,KAAR,CADJ,EAEI,+CAAWD,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFJ,EAGK,KAAKG,WAAL,CAAiBD,IAAjB,CAHL,CADJ;AAOH,KApBsC;AAAA;;AACvCC,EAAAA,WAAW,CAAC;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAD,EAAoB;AAC3B,QAAGD,KAAK,IAAIC,OAAZ,EAAqB;AACjB,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAyBD,KAAzB,CADJ,CADJ;AAKH;AACJ,GATsC,CAWvC;;;AAWAE,EAAAA,QAAQ,CAACC,SAAD,EAAY;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AACH;;AAEDG,EAAAA,MAAM,GAAG;AACL,WACI;AAAM,MAAA,SAAS,EAAC,SAAhB;AAA0B,MAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWC,YAAX,CAAwB,KAAKN,QAA7B,CAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,SAAS,EAAE,KAAKP,WAApC;AAAiD,MAAA,KAAK,EAAC,OAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,aAAZ;AAA0B,MAAA,SAAS,EAAE,KAAKA,WAA1C;AAAuD,MAAA,KAAK,EAAC,aAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAGI;AAAQ,MAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,CADJ;AAOH;;AAlCsC;;AAqC3C,MAAMc,QAAQ,GAAIC,UAAD,IAAgB;AAC7B,QAAMC,MAAM,GAAG,EAAf,CAD6B,CACX;;AAClB,MAAG,CAACD,UAAU,CAACE,KAAf,EAAsB;AAClBD,IAAAA,MAAM,CAACC,KAAP,GAAe,iCAAf;AACH;;AAED,MAAG,CAACF,UAAU,CAACG,WAAf,EAA4B;AACxBF,IAAAA,MAAM,CAACE,WAAP,GAAqB,uCAArB;AACH;;AAED,SAAOF,MAAP;AACH,CAXD;;AAaA,eAAenB,SAAS,CAAC;AACrBsB,EAAAA,IAAI,EAAE,cADe;AAErBL,EAAAA;AAFqB,CAAD,CAAT,CAGZhB,YAHY,CAAf","sourcesContent":["import React from 'react';\nimport { Field, reduxForm } from 'redux-form'\n\nclass StreamCreate extends React.Component {\n    renderError({ error, touched}) {\n        if(error && touched) {\n            return (\n                <div>\n                    <div className=\"header\">{error}</div>\n                </div>\n            )\n        }\n    }\n    \n    //inherit all the properties of input (ex. value, and onChange events) -> destructure input property from forProps\n    renderInput = ({input, label, meta}) => {\n        return (\n            <div className=\"field\">\n                <label>{label}</label>\n                <input {...input} /> \n                {this.renderError(meta)}\n            </div>\n        )\n    }\n\n    onSubmit(formProps) {\n        console.log(formProps);\n    }\n\n    render() {\n        return (\n            <form className=\"ui form\" onSubmit={this.props.handleSubmit(this.onSubmit)}>\n                <Field name=\"title\" component={this.renderInput} label=\"Title\"/>\n                <Field name=\"description\" component={this.renderInput} label=\"Description\"/>\n                <button className=\"ui button primary\">Submit</button>\n            </form>\n        )\n    }\n}\n\nconst validate = (formValues) => {\n    const errors = {} //hooked up ti render of the input title name\n    if(!formValues.title) {\n        errors.title = \"You need to enter a valid title\"\n    }\n\n    if(!formValues.description) {\n        errors.description = \"You need to enter a valid description\"\n    }\n\n    return errors;\n}\n\nexport default reduxForm({\n    form: 'streamCreate',\n    validate\n})(StreamCreate);"]},"metadata":{},"sourceType":"module"}