{"ast":null,"code":"import _slicedToArray from \"/Users/annieliang/Documents/streams/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/annieliang/Documents/streams/client/src/components/streams/StreamFind.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchStreams } from '../../actions';\n\nclass StreamFind extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchTerm: '',\n      searchResults: null\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchStreams();\n    const term = this.props.match.params.term;\n    this.setState({\n      searchTerm: term\n    });\n  }\n\n  renderSearchResults(resultsArr) {\n    results;\n  }\n\n  render() {\n    if (this.props.streams == {}) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, \"find\");\n    }\n\n    let results = [];\n    console.log(this.props.streams);\n\n    for (const _ref of Object.entries(this.props.streams)) {\n      var _ref2 = _slicedToArray(_ref, 2);\n\n      const key = _ref2[0];\n      const value = _ref2[1];\n      const title = value.title;\n\n      if (title.indexOf(this.state.searchTerm) !== -1) {\n        results.push(value);\n      } else if (value.username === this.state.searchTerm) {\n        results.push(value);\n      }\n\n      console.log(value.title + ':' + value.title.indexOf(this.state.searchTerm));\n    }\n\n    console.log(results);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \"lnas\");\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    streams: state.streams\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStreams\n})(StreamFind);","map":{"version":3,"sources":["/Users/annieliang/Documents/streams/client/src/components/streams/StreamFind.js"],"names":["React","connect","fetchStreams","StreamFind","Component","constructor","props","state","searchTerm","searchResults","componentDidMount","term","match","params","setState","renderSearchResults","resultsArr","results","render","streams","console","log","Object","entries","key","value","title","indexOf","push","username","mapStateToProps"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,YAAT,QAA6B,eAA7B;;AAEA,MAAMC,UAAN,SAAyBH,KAAK,CAACI,SAA/B,CAAyC;AACrCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,UAAU,EAAE,EADH;AAETC,MAAAA,aAAa,EAAE;AAFN,KAAb;AAIH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKJ,KAAL,CAAWJ,YAAX;AADgB,UAERS,IAFQ,GAEC,KAAKL,KAAL,CAAWM,KAAX,CAAiBC,MAFlB,CAERF,IAFQ;AAGhB,SAAKG,QAAL,CAAc;AAAEN,MAAAA,UAAU,EAAEG;AAAd,KAAd;AACH;;AAEDI,EAAAA,mBAAmB,CAACC,UAAD,EAAa;AAC5BC,IAAAA,OAAO;AACV;;AAGDC,EAAAA,MAAM,GAAG;AACL,QAAG,KAAKZ,KAAL,CAAWa,OAAX,IAAsB,EAAzB,EAA6B;AACzB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AACH;;AACD,QAAIF,OAAO,GAAG,EAAd;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKf,KAAL,CAAWa,OAAvB;;AACA,uBAA0BG,MAAM,CAACC,OAAP,CAAe,KAAKjB,KAAL,CAAWa,OAA1B,CAA1B,EAA8D;AAAA;;AAAA,YAAnDK,GAAmD;AAAA,YAA9CC,KAA8C;AAC1D,YAAMC,KAAK,GAAGD,KAAK,CAACC,KAApB;;AACA,UAAGA,KAAK,CAACC,OAAN,CAAc,KAAKpB,KAAL,CAAWC,UAAzB,MAAyC,CAAC,CAA7C,EAAgD;AAC5CS,QAAAA,OAAO,CAACW,IAAR,CAAaH,KAAb;AACH,OAFD,MAEO,IAAGA,KAAK,CAACI,QAAN,KAAmB,KAAKtB,KAAL,CAAWC,UAAjC,EAA6C;AAChDS,QAAAA,OAAO,CAACW,IAAR,CAAaH,KAAb;AACH;;AACDL,MAAAA,OAAO,CAACC,GAAR,CAAYI,KAAK,CAACC,KAAN,GAAc,GAAd,GAAoBD,KAAK,CAACC,KAAN,CAAYC,OAAZ,CAAoB,KAAKpB,KAAL,CAAWC,UAA/B,CAAhC;AACH;;AACDY,IAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;AACA,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACH;;AAtCoC;;AAyCzC,MAAMa,eAAe,GAAIvB,KAAD,IAAW;AAC/B,SAAO;AACHY,IAAAA,OAAO,EAAEZ,KAAK,CAACY;AADZ,GAAP;AAGH,CAJD;;AAMA,eAAelB,OAAO,CAAC6B,eAAD,EAAkB;AAAE5B,EAAAA;AAAF,CAAlB,CAAP,CAA2CC,UAA3C,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchStreams } from '../../actions'\n\nclass StreamFind extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            searchTerm: '',\n            searchResults: null\n        }\n    }\n\n    componentDidMount() {\n        this.props.fetchStreams();\n        const { term } = this.props.match.params;\n        this.setState({ searchTerm: term })\n    }\n\n    renderSearchResults(resultsArr) {\n        results\n    }\n    \n\n    render() {\n        if(this.props.streams == {}) {\n            return <div>find</div>\n        }\n        let results = [];\n        console.log(this.props.streams);\n        for(const [key, value] of Object.entries(this.props.streams)) {\n            const title = value.title;\n            if(title.indexOf(this.state.searchTerm) !== -1) {\n                results.push(value);\n            } else if(value.username === this.state.searchTerm) {\n                results.push(value);\n            }\n            console.log(value.title + ':' + value.title.indexOf(this.state.searchTerm));\n        }\n        console.log(results);\n        return <div>lnas</div>\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        streams: state.streams\n    }\n}\n\nexport default connect(mapStateToProps, { fetchStreams })(StreamFind);"]},"metadata":{},"sourceType":"module"}