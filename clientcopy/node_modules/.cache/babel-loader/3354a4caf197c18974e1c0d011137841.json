{"ast":null,"code":"var _jsxFileName = \"/Users/annieliang/Documents/streams/client/src/components/streams/StreamForm.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nclass StreamForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      const className = \"field \".concat(meta.error && meta.touched ? 'error' : '');\n      return React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, label), React.createElement(\"input\", Object.assign({}, input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      })), this.renderError(meta));\n    };\n\n    this.renderFileInput = ({\n      input,\n      type,\n      meta\n    }) => {\n      const mimeType = this.props;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, \"Thumbnail\"), React.createElement(\"input\", {\n        name: input.name,\n        type: type,\n        accept: mimeType,\n        onChange: event => this.handleChange(event, input),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }));\n    };\n\n    this.handleChange = (event, input) => {\n      event.preventDefault();\n      const reader = new FileReader();\n      let imageFile = event.target.files[0];\n      let fileAsB64 = [];\n\n      if (imageFile) {\n        reader.onload = () => {\n          fileAsB64.push(reader.result.substr(reader.result.indexOf(\",\") + 1));\n          imageFile.url = fileAsB64[0];\n        };\n\n        const localImageUrl = URL.createObjectURL(imageFile);\n        const imageObj = new window.Image();\n\n        imageObj.onload = () => {\n          imageFile.width = imageObj.naturalWidth;\n          imageFile.height = imageObj.naturalHeight;\n          input.onChange(imageFile);\n          URL.revokeObjectURL(imageFile);\n        };\n\n        imageObj.src = localImageUrl;\n        reader.readAsDataURL(imageFile);\n      }\n    };\n\n    this.onSubmit = formProps => {\n      this.props.onSubmit(formProps);\n    };\n  }\n\n  renderError({\n    error,\n    touched\n  }) {\n    if (error && touched) {\n      return React.createElement(\"div\", {\n        className: \"ui error message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 8\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 9\n        },\n        __self: this\n      }, error));\n    }\n  } //inherit all the properties of input (ex. value, and onChange events) -> destructure input property from forProps\n\n\n  render() {\n    return React.createElement(\"form\", {\n      className: \"ui form error\",\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"title\",\n      component: this.renderInput,\n      label: \"Title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(Field, {\n      name: \"description\",\n      component: this.renderInput,\n      label: \"Description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), React.createElement(Field, {\n      type: \"file\",\n      component: this.renderFileInput,\n      name: \"image\",\n      label: \"Thumbnail\",\n      accept: \"image/*\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"ui button primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"Submit\"));\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {}; //hooked up ti render of the input title name\n\n  if (!formValues.title) {\n    errors.title = \"You need to enter a valid title\";\n  }\n\n  if (!formValues.description) {\n    errors.description = \"You need to enter a valid description\";\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: 'streamForm',\n  validate\n})(StreamForm);","map":{"version":3,"sources":["/Users/annieliang/Documents/streams/client/src/components/streams/StreamForm.js"],"names":["React","Field","reduxForm","StreamForm","Component","renderInput","input","label","meta","className","error","touched","renderError","renderFileInput","type","mimeType","props","name","event","handleChange","preventDefault","reader","FileReader","imageFile","target","files","fileAsB64","onload","push","result","substr","indexOf","url","localImageUrl","URL","createObjectURL","imageObj","window","Image","width","naturalWidth","height","naturalHeight","onChange","revokeObjectURL","src","readAsDataURL","onSubmit","formProps","render","handleSubmit","validate","formValues","errors","title","description","form"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,YAAjC;;AAEA,MAAMC,UAAN,SAAyBH,KAAK,CAACI,SAA/B,CAAyC;AAAA;AAAA;;AAAA,SAYrCC,WAZqC,GAYvB,CAAC;AAACC,MAAAA,KAAD;AAAQC,MAAAA,KAAR;AAAeC,MAAAA;AAAf,KAAD,KAA0B;AACpC,YAAMC,SAAS,mBAAYD,IAAI,CAACE,KAAL,IAAcF,IAAI,CAACG,OAAnB,GAA6B,OAA7B,GAAuC,EAAnD,CAAf;AACA,aACI;AAAK,QAAA,SAAS,EAAEF,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQF,KAAR,CADJ,EAEI,+CAAWD,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFJ,EAGK,KAAKM,WAAL,CAAiBJ,IAAjB,CAHL,CADJ;AAOH,KArBoC;;AAAA,SAuBrCK,eAvBqC,GAuBnB,CAAC;AAAEP,MAAAA,KAAF;AAASQ,MAAAA,IAAT;AAAeN,MAAAA;AAAf,KAAD,KAA0B;AACxC,YAAMO,QAAQ,GAAG,KAAKC,KAAtB;AACA,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,EAEI;AACI,QAAA,IAAI,EAAEV,KAAK,CAACW,IADhB;AAEI,QAAA,IAAI,EAAEH,IAFV;AAGI,QAAA,MAAM,EAAEC,QAHZ;AAII,QAAA,QAAQ,EAAEG,KAAK,IAAI,KAAKC,YAAL,CAAkBD,KAAlB,EAAyBZ,KAAzB,CAJvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CADJ;AAWH,KApCoC;;AAAA,SAsCrCa,YAtCqC,GAsCtB,CAACD,KAAD,EAAQZ,KAAR,KAAkB;AAC7BY,MAAAA,KAAK,CAACE,cAAN;AACA,YAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;AACA,UAAIC,SAAS,GAAGL,KAAK,CAACM,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAAhB;AACA,UAAIC,SAAS,GAAG,EAAhB;;AAEA,UAAGH,SAAH,EAAc;AACVF,QAAAA,MAAM,CAACM,MAAP,GAAgB,MAAM;AAClBD,UAAAA,SAAS,CAACE,IAAV,CAAeP,MAAM,CAACQ,MAAP,CAAcC,MAAd,CAAqBT,MAAM,CAACQ,MAAP,CAAcE,OAAd,CAAsB,GAAtB,IAA6B,CAAlD,CAAf;AACAR,UAAAA,SAAS,CAACS,GAAV,GAAgBN,SAAS,CAAC,CAAD,CAAzB;AACH,SAHD;;AAIA,cAAMO,aAAa,GAAGC,GAAG,CAACC,eAAJ,CAAoBZ,SAApB,CAAtB;AACA,cAAMa,QAAQ,GAAG,IAAIC,MAAM,CAACC,KAAX,EAAjB;;AACAF,QAAAA,QAAQ,CAACT,MAAT,GAAkB,MAAM;AACpBJ,UAAAA,SAAS,CAACgB,KAAV,GAAkBH,QAAQ,CAACI,YAA3B;AACAjB,UAAAA,SAAS,CAACkB,MAAV,GAAmBL,QAAQ,CAACM,aAA5B;AACApC,UAAAA,KAAK,CAACqC,QAAN,CAAepB,SAAf;AACAW,UAAAA,GAAG,CAACU,eAAJ,CAAoBrB,SAApB;AACD,SALH;;AAMEa,QAAAA,QAAQ,CAACS,GAAT,GAAeZ,aAAf;AACAZ,QAAAA,MAAM,CAACyB,aAAP,CAAqBvB,SAArB;AACL;AACJ,KA5DoC;;AAAA,SA8DrCwB,QA9DqC,GA8DzBC,SAAD,IAAe;AACtB,WAAKhC,KAAL,CAAW+B,QAAX,CAAoBC,SAApB;AACH,KAhEoC;AAAA;;AACrCpC,EAAAA,WAAW,CAAC;AAAEF,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAD,EAAoB;AAC3B,QAAGD,KAAK,IAAIC,OAAZ,EAAqB;AACjB,aACI;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAyBD,KAAzB,CADJ,CADJ;AAKH;AACJ,GAToC,CAWrC;;;AAuDAuC,EAAAA,MAAM,GAAG;AACL,WACI;AAAM,MAAA,SAAS,EAAC,eAAhB;AAAgC,MAAA,QAAQ,EAAE,KAAKjC,KAAL,CAAWkC,YAAX,CAAwB,KAAKH,QAA7B,CAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,SAAS,EAAE,KAAK1C,WAApC;AAAiD,MAAA,KAAK,EAAC,OAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,aAAZ;AAA0B,MAAA,SAAS,EAAE,KAAKA,WAA1C;AAAuD,MAAA,KAAK,EAAC,aAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAGI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,SAAS,EAAE,KAAKQ,eAAnC;AAAoD,MAAA,IAAI,EAAC,OAAzD;AAAiE,MAAA,KAAK,EAAC,WAAvE;AAAmF,MAAA,MAAM,EAAC,SAA1F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,EAII;AAAQ,MAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ,CADJ;AAQH;;AA3EoC;;AA8EzC,MAAMsC,QAAQ,GAAIC,UAAD,IAAgB;AAC7B,QAAMC,MAAM,GAAG,EAAf,CAD6B,CACX;;AAClB,MAAG,CAACD,UAAU,CAACE,KAAf,EAAsB;AAClBD,IAAAA,MAAM,CAACC,KAAP,GAAe,iCAAf;AACH;;AAED,MAAG,CAACF,UAAU,CAACG,WAAf,EAA4B;AACxBF,IAAAA,MAAM,CAACE,WAAP,GAAqB,uCAArB;AACH;;AAED,SAAOF,MAAP;AACH,CAXD;;AAaA,eAAenD,SAAS,CAAC;AACrBsD,EAAAA,IAAI,EAAE,YADe;AAErBL,EAAAA;AAFqB,CAAD,CAAT,CAGZhD,UAHY,CAAf","sourcesContent":["import React from 'react';\nimport { Field, reduxForm } from 'redux-form'\n\nclass StreamForm extends React.Component {\n    renderError({ error, touched}) {\n        if(error && touched) {\n            return (\n                <div className=\"ui error message\">\n                    <div className=\"header\">{error}</div>\n                </div>\n            )\n        }\n    }\n    \n    //inherit all the properties of input (ex. value, and onChange events) -> destructure input property from forProps\n    renderInput = ({input, label, meta}) => {\n        const className = `field ${meta.error && meta.touched ? 'error' : ''}`\n        return (\n            <div className={className}>\n                <label>{label}</label>\n                <input {...input} /> \n                {this.renderError(meta)}\n            </div>\n        )\n    }\n    //refactor\n    renderFileInput = ({ input, type, meta}) => {\n        const mimeType = this.props;\n        return (\n            <div>\n                <label>Thumbnail</label>\n                <input \n                    name={input.name} \n                    type={type} \n                    accept={mimeType}\n                    onChange={event => this.handleChange(event, input)}\n                />\n            </div>\n        )\n    }\n\n    handleChange = (event, input) => {\n        event.preventDefault();\n        const reader = new FileReader();\n        let imageFile = event.target.files[0];\n        let fileAsB64 = [];\n\n        if(imageFile) {\n            reader.onload = () => {\n                fileAsB64.push(reader.result.substr(reader.result.indexOf(\",\") + 1));\n                imageFile.url = fileAsB64[0];\n            }\n            const localImageUrl = URL.createObjectURL(imageFile);\n            const imageObj = new window.Image();\n            imageObj.onload = () => {\n                imageFile.width = imageObj.naturalWidth;\n                imageFile.height = imageObj.naturalHeight;\n                input.onChange(imageFile);\n                URL.revokeObjectURL(imageFile);\n              };\n              imageObj.src = localImageUrl;\n              reader.readAsDataURL(imageFile);\n        }\n    }\n\n    onSubmit = (formProps) => {\n        this.props.onSubmit(formProps);\n    }\n\n    render() {\n        return (\n            <form className=\"ui form error\" onSubmit={this.props.handleSubmit(this.onSubmit)}>\n                <Field name=\"title\" component={this.renderInput} label=\"Title\"/>\n                <Field name=\"description\" component={this.renderInput} label=\"Description\"/>\n                <Field type=\"file\" component={this.renderFileInput} name=\"image\" label=\"Thumbnail\" accept=\"image/*\"/>\n                <button className=\"ui button primary\">Submit</button>\n            </form>\n        )\n    }\n}\n\nconst validate = (formValues) => {\n    const errors = {} //hooked up ti render of the input title name\n    if(!formValues.title) {\n        errors.title = \"You need to enter a valid title\"\n    }\n\n    if(!formValues.description) {\n        errors.description = \"You need to enter a valid description\"\n    }\n\n    return errors;\n}\n\nexport default reduxForm({\n    form: 'streamForm',\n    validate\n})(StreamForm);\n"]},"metadata":{},"sourceType":"module"}